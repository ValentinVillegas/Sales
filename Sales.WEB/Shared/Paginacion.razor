<nav>
    <ul class="pagination">
        @foreach (var link in Links)
        {
            <li @onclick=@(() => InternalSelectedPage(link)) style="cursor:pointer" class="page-item @(link.Enable ? null : "disabled") @(link.Enable ? "active" : null)">
                <a class="page-link">@link.Text</a>
            </li>
        }
    </ul>
</nav>

@code {
    [Parameter] public int PaginaActual { get; set; } = 1;
    [Parameter] public int TotalPaginas { get; set; }
    [Parameter] public int Radio { get; set; } = 10;
    [Parameter] public EventCallback<int> SeleccionarPagina { get; set; }

    List<PageModel> Links = new();

    protected override void OnParametersSet()
    {
        Links = new List<PageModel>();

        var paginaAnteriorHabilitada = PaginaActual != 1;
        var linkPaginaAnterior = PaginaActual - 1;

        Links.Add(new PageModel
            {
                Text = "Anterior",
                Page = linkPaginaAnterior,
                Enable = paginaAnteriorHabilitada
            });

        for (int i = 1; i <= TotalPaginas; i++)
        {
            if(TotalPaginas <= Radio)
            {
                Links.Add(new PageModel
                {
                    Page = i,
                    Enable = PaginaActual == i,
                    Text = $"{i}"
                });
            }

            if(TotalPaginas > Radio && i <= Radio && PaginaActual <= Radio)
            {
                Links.Add(new PageModel
                {
                    Page = i,
                    Enable = PaginaActual == i,
                    Text = $"{i}"
                });
            }

            if (PaginaActual > Radio && i  > PaginaActual - Radio && i <= PaginaActual)
            {
                Links.Add(new PageModel
                {
                    Page = i,
                    Enable = PaginaActual == i,
                    Text = $"{i}"
                });
            }
        }

        var siguientePaginaHabilitada = PaginaActual != TotalPaginas;
        var linkSiguientePagina = PaginaActual != TotalPaginas ? PaginaActual + 1 : PaginaActual;
        Links.Add(new PageModel
        {
            Text = "Siguiente",
            Page = linkSiguientePagina,
            Enable = siguientePaginaHabilitada
        });
    }

    private async Task InternalSelectedPage(PageModel pageModel)
    {
        if (pageModel.Page == PaginaActual || pageModel.Page == 0) return;

        await SeleccionarPagina.InvokeAsync(pageModel.Page);
    }

    class PageModel
    {
        public string Text { get; set; } = null!;
        public int Page { get; set; }
        public bool Enable { get; set; } = true;
        public bool Active { get; set; } = false;
    }
}