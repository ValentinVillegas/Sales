@page "/Register"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<EditForm Model="userDTO" OnValidSubmit="CreteUserAsync">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-person"/>&nbsp;Registrar nuevo usuario
                <button class="btn btn-sm btn-primary float-end" type="submit"><i class="oi oi-inbox"/>&nbsp;Registrar</button>
            </span>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Nombres:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Nombre" />
                            <ValidationMessage For="@(() => userDTO.Nombre)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Apellidos:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Apellido" />
                            <ValidationMessage For="@(() => userDTO.Apellido)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Documento:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Documento" />
                            <ValidationMessage For="@(() => userDTO.Documento)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Teléfono:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.PhoneNumber" />
                            <ValidationMessage For="@(() => userDTO.PhoneNumber)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Dirección:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Direccion" />
                            <ValidationMessage For="@(() => userDTO.Direccion)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Email:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Email" />
                            <ValidationMessage For="@(() => userDTO.Email)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label>Pais:</label>
                        <div>
                            <select class="form-select" @onchange="CargarEstadosAsync">
                                <option value="0">-- Seleccione un país --</option>
                                @if (paises is not null)
                                {
                                    @foreach (var pais in paises)
                                    {
                                        <option value="@pais.Id">@pais.Nombre</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Estado:</label>
                        <div>
                            <select class="form-select" @onchange="CargarMunicipiosAsync">
                                <option value="0">-- Seleccione un Estado --</option>
                                @if (estados is not null)
                                {
                                    @foreach (var estado in estados)
                                    {
                                        <option value="@estado.Id">@estado.Nombre</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Municipio:</label>
                        <div>
                            <select class="form-select" @bind="@userDTO.MunicipioId">
                                <option value="0">-- Seleccione un Municipio --</option>
                                @if (municipios is not null)
                                {
                                    @foreach (var municipio in municipios)
                                    {
                                        <option value="@municipio.Id">@municipio.Nombre</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@userDTO.Password" />
                            <ValidationMessage For="@(() => userDTO.Password)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Confirmación de contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@userDTO.PasswordConfirm" />
                            <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <InputImg Label="Foto" ImagenSeleccionada="ImagenSeleccionada" ImageURL="@imageUrl" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private UserDTO userDTO = new();
    private List<Pais>? paises;
    private List<Estado>? estados;
    private List<Municipio>? municipios;
    private string? imageUrl;

    protected override async Task OnInitializedAsync()
    {
        await CargarPaisesAsync();

        if (!string.IsNullOrEmpty(userDTO.Foto))
        {
            imageUrl = userDTO.Foto;
            userDTO.Foto = null;
        }
    }

    private async Task CargarPaisesAsync()
    {
        var responseHttp = await repository.Get<List<Pais>>("/api/paises/combo");

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        paises = responseHttp.Response;
    }

    private async Task CargarEstadosAsync(ChangeEventArgs e)
    {
        var paisSeleccionado = Convert.ToInt32(e.Value);

        var responseHttp = await repository.Get<List<Estado>>($"/api/estados/combo/{paisSeleccionado}");

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        estados = responseHttp.Response;
    }

    private async Task CargarMunicipiosAsync(ChangeEventArgs e)
    {
        var estadoSeleccionado = Convert.ToInt32(e.Value);
        var responseHttp = await repository.Get<List<Municipio>>($"/api/municipios/combo/{estadoSeleccionado}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        municipios = responseHttp.Response;
    }

    private async Task CreteUserAsync()
    {
        userDTO.UserName = userDTO.Email;
        userDTO.TipoUsuario = UserType.User;
        //var responseHttp = await repository.Post<UserDTO, TokenDTO>("/api/accounts/CrearUsuario", userDTO);
        var responseHttp = await repository.Post<UserDTO>("/api/accounts/CrearUsuario", userDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        //await loginService.LoginAsync(responseHttp.Response!.Token);
        await sweetAlertService.FireAsync("Confirmación", "Su cuenta ha sido creada con éxito. Se le enviará un correo electrónico con las instrucciones a seguir para activar su usuario.", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/");
    }

    private void ImagenSeleccionada(string imgBase64)
    {
        userDTO.Foto = imgBase64;
        imageUrl = null;
    }
}