@page "/Ordenes"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

@if(Ordenes is null)
{
    <div class="spinner"/>
}

else
{
    <ListaGenerica MiLista="Ordenes">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-layers" />&nbsp;Pedidos
                    </span>
                </div>

                <div class="card-body">
                    <Paginacion PaginaActual="paginaActual" TotalPaginas="totalPaginas" SeleccionarPagina="SelectedPageAsync"/>

                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Fecha</th>
                                <th>Usuario</th>
                                <th>Comentario</th>
                                <th>Estado</th>
                                <th>Partidas</th>
                                <th>Cant. Productos</th>
                                <th>Total</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var orden in Ordenes){
                                <tr>
                                    <td>@($"{orden.Fecha.ToLocalTime():yyyy/MM/dd hh:mm tt}")</td>
                                    <td>@($"{orden.Usuario!.NombreCompleto}")</td>
                                    <td>@($"{orden.Comentarios}")</td>
                                    <td>@($"{orden.OrdenEstatus}")</td>
                                    <td>@($"{orden.Partidas}")</td>
                                    <td>@($"{orden.Cantidad}")</td>
                                    <td>@($"{orden.SubTotal}")</td>
                                    <td><a href="/Ordenes/Detalles/@orden.Id" class="btn btn-info">Detalles</a></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </Body>
    </ListaGenerica>
}

@code {
    private int paginaActual = 1;
    private int totalPaginas;

    private  List<Orden>? Ordenes { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int pagina = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page)) pagina = Convert.ToInt32(Page);

        string url1 = $"/api/ordenes?page={pagina}";
        string url2 = $"/api/ordenes/totalPages";

        try
        {
            var responseHttp1 = await repository.Get<List<Orden>>(url1);
            var responseHttp2 = await repository.Get<int>(url2);

            Ordenes = responseHttp1.Response;
            totalPaginas = responseHttp2.Response;
        }
        catch(Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SelectedPageAsync(int pagina)
    {
        paginaActual = pagina;
        await LoadAsync(pagina);
    }
}