@page "/estados/detalles/{EstadoId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if(estado is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>Municipios de @estado.Nombre</h3>

    <div class="mb-2" style="display:flex; flex-wrap: wrap; align-items:center;">
        <div>
            <a class="btn btn-primary" href="/municipios/crear/@estado.Id">Nuevo Municipio</a>
            <a class="btn btn-success" href="/paises/detalles/@estado.PaisId">Regresar</a>
        </div>

        <div class="mx-2">
            <input type="text" style="width:400px" class="form-control" id="titulo" placeholder="Buscar estado..." @bind-value="Filter" />
        </div>

        <div>
            <button type="button" class="btn btn-outline-primary" @onclick="AplicarFiltroAsync">Filtrar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="LimpiarFiltroAsync">Limpiar</button>
        </div>
    </div>

    <Paginacion CurrentPage="currentPage" TotalPages="totalPages" SelectedPage="SelectedPageAsync"/>

    <ListaGenerica MiLista="municipios">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Municipio</th>
                        <th>Acciones</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var municipio in municipios!)
                    {
                        <tr>
                            <td>
                                @municipio.Nombre
                            </td>
                            <td>
                                <a class="btn btn-warning" href="/municipios/editar/@municipio.Id">Editar</a>
                                <button class="btn btn-danger" @onclick="(() => EliminarMunicipioAsync(municipio.Id))">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </ListaGenerica>
}

@code {
    private Estado? estado;
    private List<Municipio>? municipios;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int EstadoId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page)) page = Convert.ToInt32(Page);

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/municipios?id={EstadoId}&page={page}";
            url2 = $"api/municipios/totalPages?id={EstadoId}";
        }
        else
        {
            url1 = $"api/municipios?id={EstadoId}&page={page}&filter={Filter}";
            url2 = $"api/municipios/totalPages?id={EstadoId}&filter={Filter}";
        }

        var responseHttp = await repository.Get<Estado>($"/api/estados/{EstadoId}");
        var responseHttp2 = await repository.Get<List<Municipio>>(url1);
        var responseHttp3 = await repository.Get<int>(url2);

        estado = responseHttp.Response;
        municipios = responseHttp2.Response;
        totalPages = responseHttp3.Response;

        /*
        if (responseHttp.Error)
        {
            if(responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/estados");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        }

        estado = responseHttp.Response;
        */
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task EliminarMunicipioAsync(int MunicipioId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Realmente desea eliminar el registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        if (string.IsNullOrEmpty(result.Value)) return;

        var responseHttp = await repository.Delete($"/api/municipios/{MunicipioId}");

        if (responseHttp.Error)
        {
            if(responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task AplicarFiltroAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task LimpiarFiltroAsync()
    {
        Filter = string.Empty;
        await AplicarFiltroAsync();
    }
}
