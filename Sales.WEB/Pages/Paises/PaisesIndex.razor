@page "/paises"
@*@using Sales.WEB.Repositories;*@
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>Paises</h3>

<a class="btn btn-primary mb-3" href="/paises/crear">Nuevo país</a>

<ListaGenerica MiLista="Paises">
@*    <Loading>
        <p>Cargando...</p>
    </Loading>*@
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Pais</th>
                    <th>Estados</th>
                    <th>Acciones</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var p in Paises!)
                {
                    <tr>
                        <td>
                            @p.Nombre
                        </td>
                        <td>
                            @p.CantidadEstados
                        </td>
                        <td>
                            <a class="btn btn-info" href="/paises/detalles/@p.Id">Detalles</a>
                            <a class="btn btn-warning" href="/paises/editar/@p.Id">Editar</a>
                            <button class="btn btn-danger" @onclick="(() => EliminarPaisAsync(p.Id))">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</ListaGenerica>

@code {
    public List<Pais>? Paises { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<List<Pais>>("/api/paises");
        Paises = responseHttp.Response;
    }

    private async Task EliminarPaisAsync(int Id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Realmente desea eliminar el registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        if (string.IsNullOrEmpty(result.Value)) return;

        var responseHttp = await repository.Delete($"/api/paises/{Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}