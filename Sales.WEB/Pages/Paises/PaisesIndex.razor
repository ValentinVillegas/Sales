@page "/paises"
@*@using Sales.WEB.Repositories;*@
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

@if (Paises is null)
{
    <div class="spinner"/>
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i>&nbsp;Paises<a class="btn btn-sm btn-primary float-end" href="/paiese/crear"><i class="oi oi-plus"></i>&nbsp;Agregar País
                </a>
            </span>
        </div>

        <div class="card-body">
            <div class="mb-2" style="display:flex; flex-wrap:wrap; align-items:center;">
                <div>
                    <input type="text" style="width:400px" class="form-control" id="titulo" placeholder="Buscar país..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="AplicarFiltroAsync"><i class="oi oi-layers"/>&nbsp;Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="LimpiarFiltroAsync"><i class="oi oi-grid-three-up" />&nbsp;Limpiar</button>
                </div>
            </div>

            <Paginacion PaginaActual="currentPage" TotalPaginas="totalPages" SeleccionarPagina="SelectedPageAsync" />

            <ListaGenerica MiLista="Paises">
                @*<Loading>
                    <div class="spinner"/>
                </Loading>*@
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Pais</th>
                                <th style="width: 220px">Estados</th>
                                <th style="width: 300px">Acciones</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var p in Paises!)
                            {
                                <tr>
                                    <td>
                                        @p.Nombre
                                    </td>
                                    <td>
                                        @p.CantidadEstados
                                    </td>
                                    <td>
                                        <a class="btn btn-info btn-sm" href="/paises/detalles/@p.Id"><i class="oi oi-list"/>&nbsp;Detalles</a>
                                        <a class="btn btn-warning btn-sm" href="/paises/editar/@p.Id"><i class="oi oi-pencil"/>&nbsp;Editar</a>
                                        <button class="btn btn-danger btn-sm" @onclick="(() => EliminarPaisAsync(p.Id))"><i class="oi oi-trash"/>&nbsp;Eliminar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </ListaGenerica>
        </div>
    </div>
}

@code {
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    public List<Pais>? Paises { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page)) page = Convert.ToInt32(Page);

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/paises?page={page}";
            url2 = $"api/paises/totalPages";
        }
        else
        {
            url1 = $"api/paises?page={page}&filter={Filter}";
            url2 = $"api/paises/totalPages?filter={Filter}";
        }

        try
        {
            var responseHttp = await repository.Get<List<Pais>>(url1);
            var responseHttp2 = await repository.Get<int>(url2);
            Paises = responseHttp.Response;
            totalPages = responseHttp2.Response;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task EliminarPaisAsync(int Id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Realmente desea eliminar el registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        if (string.IsNullOrEmpty(result.Value)) return;

        var responseHttp = await repository.Delete($"/api/paises/{Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task AplicarFiltroAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task LimpiarFiltroAsync()
    {
        Filter = string.Empty;
        await AplicarFiltroAsync();
    }
}