@page "/paises/detalles/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@*<h3>Pais Detalles</h3>*@

@if(pais is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>Estados de @pais.Nombre</h3>

    <div class="mb-2" style="display:flex; flex-wrap: wrap; align-items:center;">
        <div>
            <a class="btn btn-primary" href="/estados/crear/@pais.Id">Nuevo Estado</a>
            <a class="btn btn-success" href="/paises">Regresar</a>
        </div>

        <div class="mx-2">
            <input type="text" style="width:400px" class="form-control" id="titulo" placeholder="Buscar estado..." @bind-value="Filter" />
        </div>

        <div>
            <button type="button" class="btn btn-outline-primary" @onclick="AplicarFiltroAsync">Filtrar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="LimpiarFiltroAsync">Limpiar</button>
        </div>
    </div>

    @*<Paginacion CurrentPage="currentPage" TotalPages="totalPages" SelectedPage="SelectedPageAsync" />*@
    <Paginacion PaginaActual="currentPage" TotalPaginas="totalPages" SeleccionarPagina="SelectedPageAsync" />

    <ListaGenerica MiLista="estados">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Estado</th>
                        <th style="width: 140px">Municipios</th>
                        <th style="width: 300px">Acciones</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var estado in estados!)
                    {
                        <tr>
                            <td>
                                @estado.Nombre
                            </td>
                            <td>
                                @estado.CantidadMunicipios
                            </td>
                            <td>
                                <a class="btn btn-info" href="/estados/detalles/@estado.Id">Detalles</a>
                                <a class="btn btn-warning" href="/estados/editar/@estado.Id">Editar</a>
                                <button class="btn btn-danger" @onclick="(() => EliminarEstadoAsync(estado.Id))">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </ListaGenerica>
}

@code {
    private Pais? pais;
    private List<Estado>? estados;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page)) page = Convert.ToInt32(Page);

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/estados?id={Id}&page={page}";
            url2 = $"api/estados/totalPages?id={Id}";
        }
        else
        {
            url1 = $"api/estados?id={Id}&page={page}&filter={Filter}";
            url2 = $"api/estados/totalPages?id={Id}&filter={Filter}";
        }

        var responseHttp = await repository.Get<Pais>($"/api/paises/{Id}");
        var responseHttp2 = await repository.Get<List<Estado>>(url1);
        var responseHttp3 = await repository.Get<int>(url2);

        pais = responseHttp.Response;
        estados = responseHttp2.Response;
        totalPages = responseHttp3.Response;

        /*
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/paises");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        pais = responseHttp.Response;
        */
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task EliminarEstadoAsync(int Id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente desea eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        if (string.IsNullOrEmpty(result.Value)) return;

        var responseHttp = await repository.Delete($"/api/estados/{Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task AplicarFiltroAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task LimpiarFiltroAsync()
    {
        Filter = string.Empty;
        await AplicarFiltroAsync();
    }
}
