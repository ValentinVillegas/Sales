@page "/paises/editar/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Editar País</h3>

@if(pais is null)
{
    <div class="spinner"/>
}
else
{
    <PaisForm @ref="paisForm" Pais="pais" OnValidSubmit="EditarAsync" ReturnAction="Regresar"></PaisForm>
}

@code {
    private Pais pais;
    private PaisForm paisForm;

    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Pais>($"/api/paises/{Id}");

        if (responseHTTP.Error)
        {
            if(responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/paises");
                return;
            }

            var message = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        pais = responseHTTP.Response;
    }

    private async Task EditarAsync()
    {
        var responseHttp = await repository.Put("/api/paises", pais);

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());

        Regresar();
    }

    private void Regresar()
    {
        paisForm.formularioEnviado = true;
        navigationManager.NavigateTo("/paises");
    }
}
